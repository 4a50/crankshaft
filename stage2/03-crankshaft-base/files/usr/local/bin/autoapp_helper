#!/bin/bash

source /opt/crankshaft/crankshaft_default_env.sh
source /opt/crankshaft/crankshaft_system_env.sh
source /boot/crankshaft/crankshaft_env.sh

echo "$1 $2 $3 $4 $5 $6 $7" >> /tmp/autoapp_helper_command

if [ $1 == "getvolume" ]; then
    level=$(amixer get Master | grep % | grep Left | awk '{print $5}' | sed 's/\[//' | sed 's/\]//' | sed 's/\%//')
    echo $level > /tmp/return_value
fi

if [ $1 == "getcapvolume" ]; then
    level=$(amixer get Capture | grep % | grep Left | awk '{print $5}' | sed 's/\[//' | sed 's/\]//' | sed 's/\%//')
    echo $level > /tmp/return_value
fi

if [ $1 == "setvolumes" ] && [ ! -z $2 ] && [ ! -z $3 ]; then
    amixer set -q Master $2% unmute
    sudo runuser -l pi -c 'amixer set -q Master '$2'% unmute'
    amixer set -q Capture $3% unmute
    sudo runuser -l pi -c 'amixer set -q Capture '$3'% unmute'
fi

if [ $1 == "setvolume" ] && [ ! -z $2 ]; then
    amixer set -q Master $2% unmute
    sudo runuser -l pi -c 'amixer set -q Master '$2'% unmute'
fi

if [ $1 == "setcapvolume" ] && [ ! -z $2 ]; then
    amixer set -q Capture $2% unmute
    sudo runuser -l pi -c 'amixer set -q Capture '$2'% unmute'
fi

if [ $1 == "savevolumes" ]; then
    levelplay=$(amixer get Master | grep % | grep Left | awk '{print $5}' | sed 's/\[//' | sed 's/\]//' | sed 's/\%//')
    levelcap=$(amixer get Capture | grep % | grep Left | awk '{print $5}' | sed 's/\[//' | sed 's/\]//' | sed 's/\%//')
    crankshaft filesystem boot unlock
    sudo sh -c 'echo '$levelplay' > /boot/crankshaft/volume'
    sudo sh -c 'echo '$levelcap' > /boot/crankshaft/capvolume'
    crankshaft filesystem boot lock
fi

if [ $1 == "getfreemem" ]; then
    mem=$(free -h | grep Mem | awk {'print $4'})
    echo $mem > /tmp/return_value
fi

if [ $1 == "getcpufreq" ]; then
    typeset -i freq
    freq=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq)/1000
    echo "$freq MHz" > /tmp/return_value
fi

if [ $1 == "getcputemp" ]; then
    typeset -i freq
    temp=$(/opt/vc/bin/vcgencmd measure_temp | cut -d= -f2)
    echo "$temp" > /tmp/return_value
fi

if [ $1 == "getdisconnect" ]; then
    remaining=$(systemctl list-timers disconnect.timer | grep left | cut -dl -f1  | awk {'print $5 $6'})
    value="Stopped"
    if [ ! -z $remaining ]; then
        value="$remaining left"
    fi
    echo "$DISCONNECTION_SCREEN_POWEROFF_SECS-$value" > /tmp/return_value
fi

if [ $1 == "getshutdown" ]; then
    remaining=$(systemctl list-timers shutdown.timer | grep left | cut -dl -f1  | awk {'print $5 $6'})
    value="Stopped"
    if [ ! -z $remaining ]; then
        value="$remaining left"
    fi
    echo "$DISCONNECTION_POWEROFF_MINS-$value"  > /tmp/return_value
fi

if [ $1 == "setdisconnect" ] && [ ! -z $2 ]; then
    crankshaft timers disconnect set $2
fi

if [ $1 == "setshutdown" ] && [ ! -z $2 ]; then
    crankshaft timers shutdown set $2
fi

if [ $1 == "getgpios" ]; then
    echo "$ENABLE_GPIO $DEV_PIN $INVERT_PIN $X11_PIN $REARCAM_PIN $ANDROID_PIN " > /tmp/return_value
fi

if [ $1 == "setgpios" ] && [ ! -z $2 ]; then
    crankshaft filesystem boot unlock
    sudo sed -i 's/^ENABLE_GPIO=.*/ENABLE_GPIO='$(echo $2 | sed 's/-/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^DEV_PIN=.*/DEV_PIN='$(echo $3 | sed 's/-/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^INVERT_PIN=.*/INVERT_PIN='$(echo $4 | sed 's/-/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^X11_PIN=.*/X11_PIN='$(echo $5 | sed 's/-/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^REARCAM_PIN=.*/REARCAM_PIN='$(echo $6 | sed 's/-/0/')'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^ANDROID_PIN=.*/ANDROID_PIN='$(echo $7 | sed 's/-/0/')'/' /boot/crankshaft/crankshaft_env.sh
    crankshaft filesystem boot lock
fi

if [ $1 == "getdaynight" ]; then
    echo "$RTC_DAY_START $RTC_NIGHT_START " > /tmp/return_value
fi

if [ $1 == "setdaynight" ] && [ ! -z $2 ] && [ ! -z $3 ]; then
    crankshaft timers daynight $2 $3
fi

if [ $1 == "gettzdata" ]; then
    cat zone1970.tab | grep / | awk {'print $3'} | sort > /tmp/return_value
fi

if [ $1 == "getmodeflip" ]; then
    echo "$START_X11 $FLIP_SCREEN " > /tmp/return_value
fi

if [ $1 == "setmode" ] && [ ! -z $2 ]; then
    crankshaft filesystem boot unlock
    sudo sed -i 's/^START_X11=.*/START_X11='$(echo $2)'/' /boot/crankshaft/crankshaft_env.sh
    crankshaft filesystem boot lock
fi

if [ $1 == "setflip" ] && [ ! -z $2 ]; then
    crankshaft filesystem boot unlock
    sudo sed -i 's/^FLIP_SCREEN=.*/FLIP_SCREEN='$(echo $2)'/' /boot/crankshaft/crankshaft_env.sh
    crankshaft filesystem boot lock
fi

if [ $1 == "getoutputs" ]; then
    sudo rm /tmp/return_value
    aplay -l | grep card | grep -v IEC958/HDMI | while read -r line; do
        card=$(echo $line | cut -d":" -f1 | cut -d" " -f2)
        device=$(echo $line | cut -d":" -f2 | cut -d"," -f2 | sed 's/^ //g' | cut -d" " -f2)
        desc=$(echo $line | cut -d: -f3 | cut -d[ -f1 | sed 's/^ //g' | sed 's/ *$//')
        echo "$card|$device - $desc" >> /tmp/return_value
    done
fi

if [ $1 == "getinputs" ]; then
    sudo rm /tmp/return_value
    arecord -l | grep card | while read -r line; do
        card=$(echo $line | cut -d":" -f1 | cut -d" " -f2)
        device=$(echo $line | cut -d":" -f2 | cut -d"," -f2 | sed 's/^ //g' | cut -d" " -f2)
        desc=$(echo $line | cut -d: -f3 | cut -d[ -f1 | sed 's/^ //g' | sed 's/ *$//')
        echo "$card|$device - $desc" >> /tmp/return_value
    done
fi

if [ $1 == "getdefaultoutput" ]; then
    pulseid=$(cat /etc/pulse/client.conf | grep 'default-sink =' | cut -d= -f2)
    defaultoutput=$(pactl list sinks short | awk {'print $1" "$2'} | grep $pulseid | awk {'print $2'})
    card=$(pacmd list-sinks | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.card =' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
    device=$(pacmd list-sinks | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.device =' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
    desc=$(pacmd list-sinks | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.id =' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
    echo "$card|$device - $desc" > /tmp/return_value
fi

if [ $1 == "getdefaultinput" ]; then
    pulseid=$(cat /etc/pulse/client.conf | grep 'default-source =' | cut -d= -f2)
    defaultoutput=$(pactl list sources short | awk {'print $1" "$2'} | grep $pulseid | awk {'print $2'})
    card=$(pacmd list-sources | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.card =' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
    device=$(pacmd list-sources | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.device =' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
    desc=$(pacmd list-sources | grep -A34 $defaultoutput | grep -B4 'alsa.card =' | sed 's/\t//g' | grep 'alsa.id =' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
    echo "$card|$device - $desc" > /tmp/return_value
fi

if [ $1 == "setoutput" ]; then
    receive=$(echo "$1 $2 $3 $4 $5 $6 $7" | cut -d" " -f2- | sed 's/^ //' | sed 's/ *$//')
    card=$(echo $receive | cut -d- -f1 | cut -d"|" -f1 | sed 's/^ //' | sed 's/ *$//')
    device=$(echo $receive | cut -d- -f1 | cut -d"|" -f2 | sed 's/^ //' | sed 's/ *$//')
    desc=$(echo $receive | cut -d- -f2- | sed 's/^ //' | sed 's/ *$//')
    echo "Request: $receive" > /tmp/set_soundcard
    echo "Card: $card" >> /tmp/set_soundcard
    echo "Device: $device" >> /tmp/set_soundcard
    echo "Desc: $desc" >> /tmp/set_soundcard
    pulsedevice=$(pactl list sinks | grep -B25 -e 'alsa.card = "'$card'"' | grep -B24 -e 'alsa.device = "'$device'"' | grep -A0 'Name: ' | grep -v '.default' | sed 's/--//' | sed 's/Name: //' | tail -n1 | sed 's/^ //' | sed 's/ *$//')
    pulseid=$(pactl list sinks short | grep $pulsedevice | awk {'print $1'})
    echo "Pulse: $pulsedevice" >> /tmp/set_soundcard
    echo "Pulse ID: $pulseid" >> /tmp/set_soundcard
    if [ ! -z $pulsedevice ]; then
        crankshaft filesystem system unlock
            sudo sed -i 's/.*default-sink.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# Crankshaft selected output device.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# no output selected -> default.*//' /etc/pulse/client.conf
            sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
            sudo sh -c 'echo "# Crankshaft selected output device" >> /etc/pulse/client.conf'
            sudo sh -c 'echo "default-sink = '$(echo $pulseid)'" >> /etc/pulse/client.conf'
        crankshaft filesystem system lock
    else
        crankshaft filesystem system unlock
            sudo sed -i 's/.*default-sink.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# Crankshaft selected output device.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# no output selected -> default.*//' /etc/pulse/client.conf
            sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
            sudo sh -c 'echo "# Crankshaft selected output device" >> /etc/pulse/client.conf'
            sudo sh -c 'echo "# no output selected -> default" >> /etc/pulse/client.conf'
        crankshaft filesystem system lock
    fi
fi

if [ $1 == "setinput" ]; then
    receive=$(echo "$1 $2 $3 $4 $5 $6 $7" | cut -d" " -f2- | sed 's/^ //' | sed 's/ *$//')
    card=$(echo $receive | cut -d- -f1 | cut -d"|" -f1 | sed 's/^ //' | sed 's/ *$//')
    device=$(echo $receive | cut -d- -f1 | cut -d"|" -f2 | sed 's/^ //' | sed 's/ *$//')
    desc=$(echo $receive | cut -d- -f2- | sed 's/^ //' | sed 's/ *$//')
    echo "Request: $receive" > /tmp/set_mic
    echo "Card: $card" >> /tmp/set_mic
    echo "Device: $device" >> /tmp/set_mic
    echo "Desc: $desc" >> /tmp/set_mic
    pulsedevice=$(pactl list sources | grep -B25 -e 'alsa.card = "'$card'"' | grep -B24 -e 'alsa.device = "'$device'"' | grep -A0 'Name: ' | grep -v '.default' | sed 's/--//' | sed 's/Name: //' | tail -n1 | sed 's/^ //' | sed 's/ *$//')
    pulseid=$(pactl list sources short | grep $pulsedevice | awk {'print $1'})
    echo "Pulse: $pulsedevice" >> /tmp/set_mic
    echo "Pulse ID: $pulseid" >> /tmp/set_mic
    if [ ! -z $pulsedevice ]; then
        crankshaft filesystem system unlock
            sudo sed -i 's/.*default-source.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# Crankshaft selected input device.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# no input selected -> default.*//' /etc/pulse/client.conf
            sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
            sudo sh -c 'echo "# Crankshaft selected input device" >> /etc/pulse/client.conf'
            sudo sh -c 'echo "default-source = '$(echo $pulseid)'" >> /etc/pulse/client.conf'
        crankshaft filesystem system lock
    else
        crankshaft filesystem system unlock
            sudo sed -i 's/.*default-source.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# Crankshaft selected input device.*//' /etc/pulse/client.conf
            sudo sed -i 's/^# no input selected -> default.*//' /etc/pulse/client.conf
            sudo sed -i '/./,/^$/!d' /etc/pulse/client.conf
            sudo sh -c 'echo "# Crankshaft selected input device" >> /etc/pulse/client.conf'
            sudo sh -c 'echo "# no input selected -> default" >> /etc/pulse/client.conf'
        crankshaft filesystem system lock
    fi
fi

exit 0
